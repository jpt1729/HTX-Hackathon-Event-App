generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["rhel-openssl-1.0.x"]
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                     @id @default(cuid())
  name                     String?
  description              String?                    
  email                    String                     @unique
  emailVerified            DateTime?
  image                    String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime                   @updatedAt
  activitycontentresponses ActivityContentResponses[] @relation("UserToActivityContentResponses")
  accounts                 Account[]                  @relation("AccountToUser")
  Authenticator            Authenticator[]            @relation("AuthenticatorToUser")
  sessions                 Session[]                  @relation("SessionToUser")
  activities               UserActivityRole[]         @relation("UserToUserActivityRole")
  events                   UserEventRole[]            @relation("UserToUserEventRole")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation("AccountToUser", fields: [userId], references: [id])

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation("SessionToUser", fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation("AuthenticatorToUser", fields: [userId], references: [id])

  @@id([userId, credentialID])
}

model Event {
  id                String          @id @default(cuid())
  slug              String          @unique @default(uuid())
  published         Boolean?        @default(false)
  title             String
  description       String?
  location          Json
  playlist          String?
  startTime         DateTime
  endTime           DateTime
  content           String?
  activities        Activity[]      @relation("eventActivities")
  eventParticipants UserEventRole[] @relation("EventToUserEventRole")
}

model Activity {
  id                   String             @id @default(cuid())
  eventId              String
  slug                 String             @unique
  published            Boolean?           @default(false)
  title                String
  description          String?
  startTime            DateTime
  endTime              DateTime
  event                Event              @relation("eventActivities", fields: [eventId], references: [id])
  activitycontent      ActivityContent[]  @relation("ActivityToActivityContent")
  activityParticipants UserActivityRole[] @relation("ActivityToUserActivityRole")
}

model UserEventRole {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  role      String
  createdAt DateTime @default(now())
  event     Event    @relation("EventToUserEventRole", fields: [eventId], references: [id])
  user      User     @relation("UserToUserEventRole", fields: [userId], references: [id])

  @@unique([userId, eventId])
}

model UserActivityRole {
  id         String   @id @default(cuid())
  userId     String
  activityId String
  role       String   @default("participant")
  createdAt  DateTime @default(now())
  activity   Activity @relation("ActivityToUserActivityRole", fields: [activityId], references: [id])
  user       User     @relation("UserToUserActivityRole", fields: [userId], references: [id])

  @@unique([userId, activityId])
}

model ActivityContent {
  id         String                     @id @default(cuid())
  title      String?
  type       String
  order      Int  @default(-1)
  activityId String
  content    Json
  activity   Activity                   @relation("ActivityToActivityContent", fields: [activityId], references: [id])
  responses  ActivityContentResponses[] @relation("ActivityContentResponsesToActivityContent")
}

model ActivityContentResponses {
  id                String           @id @default(cuid())
  activitycontentId String?
  createdAt         DateTime         @default(now())
  userId            String
  response          String
  activitycontent   ActivityContent? @relation("ActivityContentResponsesToActivityContent", fields: [activitycontentId], references: [id])
  user              User             @relation("UserToActivityContentResponses", fields: [userId], references: [id])
}
