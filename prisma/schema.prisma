datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                     String          @id @default(cuid())
  name                   String?
  email                  String          @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  Authenticator          Authenticator[]
  events UserEventRole[]
  activities UserActivityRole[]
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id          String   @id @default(cuid())
  slug        String   @unique @default(uuid())
  published   Boolean? @default(false)
  title       String
  description String?
  content String?
  location    Json
  playlist    String?
  startTime   DateTime
  endTime     DateTime

  eventParticipants UserEventRole[]
  activities        Activity[] @relation("eventActivities")
}

model Activity {
  id          String   @id @default(cuid())
  eventId     String
  slug        String   @unique @default(cuid())
  published   Boolean? @default(false)
  title       String
  description String?
  content     Json?
  startTime   DateTime
  endTime     DateTime

  event                Event  @relation("eventActivities", fields: [eventId], references: [id])
  activityParticipants UserActivityRole[]
}
model UserEventRole {
  id        String  @id @default(cuid())
  userId    String
  eventId   String
  role      String
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model UserActivityRole {
  id        String  @id @default(cuid())
  userId    String
  activityId   String
  role      String @default("participant")
  createdAt DateTime @default(now())

  user      User @relation(fields: [userId], references: [id], onDelete: Cascade)
  activity     Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([userId, activityId])
}